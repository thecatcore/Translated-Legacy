plugins {
	id 'java-library'
	id "fabric-loom" version "1.9-SNAPSHOT" apply false
	id "legacy-looming" version "1.9-SNAPSHOT" apply false
	id 'babric-loom-extension' version '1.9-SNAPSHOT' apply false
	id 'maven-publish'
}

enum FabricKind {
	UPSTREAM("net.fabricmc:yarn"),
	LEGACY("net.legacyfabric:yarn"),
	BABRIC("babric:barn");

	String mappingsGroup;

	FabricKind(String mappingsGroup) {
		this.mappingsGroup = mappingsGroup;
	}
}

class VersionInfo {
	String mc, mappings;
	FabricKind kind;
	List<String> projectNames;

	VersionInfo(String mc, String mappings, FabricKind kind, String... projectNames) {
		this.mc = mc;
		this.mappings = mappings;
		this.kind = kind;
		this.projectNames = Arrays.asList(projectNames);
	}

	public static final VersionInfo[] VERSIONS = [
//			new VersionInfo("1.20.4", "3", FabricKind.UPSTREAM),
			new VersionInfo("b1.7.3", "9", FabricKind.BABRIC, "babric", "stapi"),
	];

	static VersionInfo getInfo(String projectName) {
		for (def info in VERSIONS) {
            if (projectName == info.mc || info.projectNames.contains(projectName)) {
                return info
            }
        }
        
		return VERSIONS[0]
	}
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

project.ext.lwjglVersion = "3.3.3"
project.ext.lwjglNatives = "natives-linux"

allprojects {
	def versionInfo = VersionInfo.getInfo(project.name);

	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'

	if (versionInfo.kind == FabricKind.LEGACY) {
		apply plugin: 'legacy-looming'
	} else if (versionInfo.kind == FabricKind.BABRIC) {
		apply plugin: 'babric-loom-extension'
	}

	version = rootProject.version
	group = rootProject.group

	repositories {

	}

	loom {
	}

	dependencies {
		minecraft "com.mojang:minecraft:$versionInfo.mc"
		mappings "$versionInfo.kind.mappingsGroup:$versionInfo.mc+build.${versionInfo.mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:$rootProject.loader_version"

		implementation(group: 'com.ibm.icu', name: 'icu4j', version: '71.1')

		if (versionInfo.kind == FabricKind.BABRIC) {
			implementation "com.google.code.gson:gson:2.8.9"
			implementation "blue.endless:jankson:1.2.1"
		}

//		implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

//		implementation "org.lwjgl:lwjgl"
		implementation "org.lwjgl:lwjgl-harfbuzz:$lwjglVersion"
//		runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
//		runtimeOnly "org.lwjgl:lwjgl-harfbuzz::$lwjglNatives"
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
		// Loom also requires J17.
		it.options.release = 8
	}

	java {
		sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.base.archivesName.get()}"}
		}
	}
}

dependencies {
	include(group: 'com.ibm.icu', name: 'icu4j', version: '71.1')
}

subprojects {
	project.base.archivesName = "${rootProject.base.archivesName.get()}-${project.name}"

	dependencies {
		api(project.dependencies.project(path: ":", configuration: 'namedElements'))
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			// Include the jar from the sub project.
			nestedJars.from project("${it.path}").tasks.getByName("remapJar")
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}